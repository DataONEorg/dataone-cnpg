## Default values for creation of a CNPG cluster, and also for the PostgreSQL config usually found
## in the following files:
##   - postgresql.conf: main run-time configuration file of PostgreSQL
##   - pg_hba.conf: clients authentication file
##   - pg_ident.conf: map external users to internal users
## See: https://cloudnative-pg.io/documentation/1.20/postgresql_conf/
##
## Typically, you would override these parameters as necessary, in your own application's
## environment-specific values-overrides yaml file, and then deploy the application using:
##
## $ helm install <releasename> oci:////ghcr.io/dataoneorg/charts/cnpg --version <version> \
##                              -f </path/to/your/values-overrides.yaml>

## @section CloudNative PG Operator Configuration Parameters

## @param instances Number of PostgreSQL instances required in the PG cluster.
##
instances: 3

## @param existingSecret Provide a basic auth Secret, or leave blank to auto-create one
## This is the name of the Basic Auth Secret holding the PostgreSQL database username and
## password. Leave blank to auto-create a secret file with a generated secure password
##
## IMPORTANT:
## 1. If you are providing your own Secret, then:
##    - the Secret must contain the exact key names: 'username' and 'password'
##    - the username must match the 'dbUser' value below
## 2. These credentials are used ONLY for initializing the database upon creation of the cluster.
##    Changing the credentials in the secret and doing a 'helm upgrade' after the cluster has been
##    created, will NOT update the credentials in the existing Postgres database!
##
existingSecret: ""

## @param dbName The name of the database to create in the Postgres cluster.
##
## IMPORTANT:
## This value is used ONLY for initializing the database upon creation of the cluster.
#  Changing the database name here and doing a 'helm upgrade' after the cluster has been
## created, will NOT change the name of the database in an existing cluster!
##
dbName: test

## @param dbUser DB owner/username. Leave blank to match the DB name (see `dbName`)
##
## IMPORTANT:
## 1. This value is used ONLY for initializing the database upon creation of the cluster.
##    Changing the 'dbUser' username here, and doing a 'helm upgrade' after the cluster has
##    been created, will NOT update the credentials in the existing Postgres database!
## 2. If you are providing your own Secret (see 'existingSecret'), then the username in the
##    secret must match this value.
##
dbUser: ""

## @param resources Memory & CPU resource requests and limits for each PostgreSQL container.
## For a PostgreSQL workload it is recommended to set a "Guaranteed" QoS. See the CNPG docs:
## https://cloudnative-pg.io/documentation/1.20/resource_management/
## For your cluster's pods to get assigned to the "Guaranteed" QoS class, you must set limits
## and requests for both CPU and memory TO THE SAME VALUE!
## Example (use your own values for 'cpu' and 'memory'):
##     resources:
##       requests:
##         cpu: 1
##         memory: 1Gi
##       limits:
##         cpu: 1
##         memory: 1Gi
##
resources: {}

## Database File Storage settings
## @param persistence.storageClass StorageClass for postgres volumes
## @param persistence.size PVC Storage size request for postgres volumes
##
persistence:
  storageClass: csi-cephfs-sc
  size: 1Gi

## @section Options available to create a new PostgreSQL cluster
## There are primarily two ways to bootstrap a new cluster:
##
## 1. From scratch (initdb)
##    - Creates a new, empty database.
##    - Optionally automates 'pg_dump' & 'pg_restore' to import a database from an existing
##       PostgreSQL cluster, even if located outside Kubernetes or running a different major version
##
## 2. From an existing K8s PostgreSQL cluster, either:
##    - by syncing directly (pg_basebackup) or
##    - [Not yet supported by this helm chart] indirectly through a physical base backup (recovery)
##
init:
  ## @param init.method Choose which bootstrapping methods to use when creating the new cluster
  ## - initdb: create a new, empty database, with optional import from an external DB
  ## - pg_basebackup: use streaming replication to copy an existing, binary-compatible PG instance
  ##
  method: initdb

  ## @param init.import Import of data from external databases on startup
  ## ADC Metacat example:
  ##  import:
  ##    type: microservice
  ##    databases:
  ##      - metacat
  ##    source:
  ##      ## as defined in 'cnpg.externalClusters'
  ##      externalCluster: metacatarctic-postgresql-0
  ##    pgRestoreExtraOptions:
  ##      - '--verbose'
  ##
  import: {}

  ## @param init.pg_basebackup Uses streaming replication to copy an existing PG instance
  ## https://cloudnative-pg.io/documentation/1.27/bootstrap/#bootstrap-from-a-live-cluster-pg_basebackup
  ## ADC Metacat example:
  ##   pg_basebackup:
  ##     source: mc-arctic-pg    ## as defined in 'init.externalClusters', below
  ##
  pg_basebackup: {}

  ## @param init.externalClusters external DB as a data source for import on startup
  ## ADC Metacat example:
  ##   externalClusters:
  ##     - name: mc-arctic-pg
  ##       connectionParameters:
  ##         # Use the correct IP or host name for the source database
  ##         host: metacatarctic-postgresql-hl.arctic.svc.cluster.local
  ##         user: metacat
  ##         dbname: metacat
  externalClusters: []

## @section Optional PostgreSQL Configuration Parameters
##
postgresql:
  ## @param postgresql.pg_hba Client authentication pg_hba.conf
  ## ref: https://cloudnative-pg.io/documentation/1.20/postgresql_conf/#the-pg_hba-section and
  ## https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html
  ##
  ## Example:
  ## in Metacat, we override the default pg_hba.conf to allow password auth, like this:
  ##  pg_hba:
  ##    # TYPE        DATABASE      USER          ADDRESS         METHOD
  ##    - host        metacat       metacat       0.0.0.0/0       password
  ##    - host        metacat       metacat       ::0/0           password
  ##    - host        all           postgres      0.0.0.0/0       password
  ##    - host        all           postgres      ::0/0           password
  pg_hba: []

  ## @param postgresql.pg_ident [default: see values.yaml] Override 'pg_ident.conf' user mappings
  ## ref: https://cloudnative-pg.io/documentation/1.20/postgresql_conf/#the-pg_ident-section
  ##      https://www.postgresql.org/docs/current/auth-username-maps.html
  ## Leaving this blank will automatically create the following mapping:
  ##
  ##  pg_ident:
  ##    - local       postgres       <dbUser>
  ##
  ## ...which allows the UNIX user 'postgres' (inside the container shell) to connect as the
  ## database user defined in 'dbUser' using peer authentication, with no password and no
  ## hostname required. i.e. simply:
  ##   $ psql -U <Username>    ## (and use [-d <database>], if database name doesn't match username)
  ##
  ## NOTES:
  ## - The user will only have the DB privileges of the 'dbUser' user, not the 'postgres' superuser.
  ## - The rule applies only for local (Unix domain socket) connections, from a shell inside the
  ##   container; remote access still requires authentication.
  ##
  pg_ident: []

  ## Extended configuration, appended to defaults
  ## ref: https://cloudnative-pg.io/documentation/1.20/postgresql_conf/#the-postgresql-section
  ##
  parameters:
    ## @param postgresql.parameters.max_connections override PG default 200 max DB connections.
    ## 'max_connections' must exceed your application's max connections, since some of these
    ## connections will be reserved for superuser
    ##
    max_connections: 250
    ## @param postgresql.parameters.shared_buffers memory for caching data (PG default: 128MB)
    ## If you have a dedicated database server with 1GB or more of RAM, a reasonable starting
    ## value for shared_buffers is 25% of the container memory. E.g: if shared_buffers=256MB, then
    ## the recommended value for container memory size is 1 GB (see 'resources')
    ##
    shared_buffers: 128MB
